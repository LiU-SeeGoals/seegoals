#!/usr/bin/env python3

import os
import subprocess
import sys

RED = "\033[1;31m"
GREEN = "\033[1;32m"
CYAN = "\033[1;36m"
NC = "\033[0m"

script_dir = os.path.dirname(os.path.abspath(__file__))
env_path = os.path.join(script_dir, "..", "..", "environment.ini")
docker_dir = os.path.join(script_dir, "..", "..", "docker")

def read_env_ini():
    env_vars = {}
    with open(env_path, "r") as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith("#"):
                key, value = line.split("=", 1)
                env_vars[key.strip()] = value.strip().strip('"').strip("'")
    return env_vars

envs = read_env_ini()

flags = {
    "rebuild": ["--rebuild"],
    "no-network": ["--no-network"],
    "help": ["-h", "--help"]
}

remove_containers = [
    envs.get("DOCKER_NAME_AI"),
    envs.get("DOCKER_NAME_GAME_VIEWER"),
    envs.get("DOCKER_NAME_SSL_VISION_CLIENT"),
    envs.get("DOCKER_NAME_SSL_GAME_CONTROLLER"),
    envs.get("DOCKER_NAME_SSL_VISION"),
    envs.get("DOCKER_NAME_ER_SIM"),
]

choices = [
    { # Choice 1
        "choice-text": "Base configuraiton (pre built images for both services)",
        "pull_images": [
            "ghcr.io/liu-seegoals/game-viewer:latest",
            "ghcr.io/liu-seegoals/controller:latest"
        ],
        "docker_cmd": [
            "docker", "compose", "-f", f"{docker_dir}/docker-compose.yml",
            "-p", "base-config",
            "up", "-d"
        ],
        "container_to_enter": None,
    },
    { # Choice 2
        "choice-text": "Local controller, enter ai",
        "pull_images": [
            "ghcr.io/liu-seegoals/game-viewer:latest"
        ],
        "docker_cmd": [
            "docker", "compose", "-f", f"{docker_dir}/docker-compose.yml",
            "-f", f"{docker_dir}/docker-compose.yml",
            "-f", f"{docker_dir}/docker-compose.local-controller.yml",
            "-p", "controller-config",
            "up", "-d"
        ],
        "container_to_enter": envs.get("DOCKER_NAME_AI")
    },
    { # Choice 3
        "choice-text": "Local game viewer, enter game viewer",
        "pull_images": [
            "ghcr.io/liu-seegoals/controller:latest"
        ],
        "docker_cmd": [
            "docker", "compose",
            "-f", f"{docker_dir}/docker-compose.yml",
            "-f", f"{docker_dir}/docker-compose.local-gameviewer.yml",
            "-p", "gameviewer-config",
            "up",
        ],
        "container_to_enter": envs.get("DOCKER_NAME_VIEWER")
    },
    { # Choice 4
        "choice-text": "Local controller and local game viewer",
        "pull_images": [],
        "docker_cmd": [
            "docker", "compose",
            "-f", f"{docker_dir}/docker-compose.yml",
            "-f", f"{docker_dir}/docker-compose.local-controller.yml",
            "-f", f"{docker_dir}/docker-compose.local-gameviewer.yml",
            "-p", "dev-config", "up",
        ],
        "container_to_enter": None
    },
    { # Choice 5
        "choice-text": "Start real SSL vision (only on fetdator)",
        "pull_images": [
            "ghcr.io/liu-seegoals/ssl-vision:latest"
            "ghcr.io/liu-seegoals/game-viewer:latest"
        ],
        "docker_cmd": [
            "docker", "compose",
            "-f", f"{docker_dir}/docker-compose.yml",
            "-f", f"{docker_dir}/docker-compose.real-robots.yml",
            "-f", f"{docker_dir}/docker-compose.local-controller.yml",
            "-p", "gameviewer-config", "up",
        ],
        "container_to_enter": None
    },
    { # Choice 6
        "choice-text": "Start for competition",
        "pull_images": [],
        "docker_cmd": [
            "docker", "compose",
            "-f", f"{docker_dir}/docker-compose.yml",
            "-f", f"{docker_dir}/docker-compose.competition.yml",
            "-p", "gameviewer-config", "up", "-d"
        ],
        "container_to_enter": envs.get("DOCKER_NAME_AI")
    },
]

def check_submodule_status():
    result = subprocess.run(["git", "submodule", "status"], 
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    return b"^-" not in result.stdout

def remove_old_containers():
    print("Removing old containers:", file=sys.stderr)
    for container in remove_containers:
        print(f"\t{container}...")
        subprocess.run(["docker", "rm", container],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL)

def execute_choice(choice, rebuild):
    choice -= 1
    print(f"Starting: {choices[choice]['choice-text']}")

    container_to_enter = None
    docker_cmd = choices[choice]["docker_cmd"]
    container_to_enter = choices[choice]["container_to_enter"]

    if rebuild:
        docker_cmd += [ "--build", "-d", "--force-recreate" ]

    if network:
        for image in choices[choice]["pull_images"]:
            subprocess.run(["docker", "pull", image])

    subprocess.run(docker_cmd)

    if choices[choice]["container_to_enter"] is not None:
        cmd = [
            "docker", "exec", "-it", container_to_enter,
            "sh", "-c", "cd cmd && exec sh"
        ]
        print(f"{CYAN}Entering {container_to_enter} container...{NC}")
        subprocess.run(cmd)

if __name__ == "__main__":
    choice = None
    rebuild = False
    network = True

    # Parse options
    if len(sys.argv) > 1:
        if sys.argv[1].isdigit():
            choice = int(sys.argv[1])
            sys.argv.pop(1)

        for arg in sys.argv[1:]:
            if arg in flags["rebuild"]:
                print("Rebuilding containers...")
                rebuild = True
            if arg in flags["no-network"]:
                network = False
            elif arg in flags["help"]:
                print("lul")
                sys.exit(0)

    # Choose what to do
    if not choice:
        print("Select Docker Compose configuration:")
        for i, choice in enumerate(choices):
            print(f"{i+1}. {choice['choice-text']}")

        choice = int(input(f"Enter your choice (1-{len(choices)}): "))

    if not(1 <= choice <= len(choices)):
        print(f"Invalid choice {choice}...")
        sys.exit(1)

    # Cleanup
    if check_submodule_status():
        print("All submodules are already initialized.")
    else:
        print("Submodules are not initialized. Initializing now...")
        subprocess.run(["git", "submodule", "update", "--init", "--recursive", "--no-fetch", "--remote"])
        subprocess.run(["git", "status", "--ignore-submodules=all"])
        print("Submodules initialized and updated.")

    # Execute
    print(f"{CYAN}Killing previous containers...{NC}")
    subprocess.run([f"{script_dir}/kill-sg"], shell=True)

    remove_old_containers()

    execute_choice(choice, rebuild)
